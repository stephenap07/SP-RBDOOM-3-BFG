#ifndef __GUI_RMLRENDERDECORATOR_H__
#define __GUI_RMLRENDERDECORATOR_H__

#include "RmlUi/Core/Decorator.h"


class idRmlRenderDecorator : public Rml::Decorator
{
public:
	idRmlRenderDecorator( const char* name, idVec3 rot, idVec3 origin );

	virtual ~idRmlRenderDecorator();

	/// Called on a decorator to generate any required per-element data for a newly decorated element.
	/// @param[in] element The newly decorated element.
	/// @return A handle to a decorator-defined data handle, or nullptr if none is needed for the element.
	Rml::DecoratorDataHandle GenerateElementData( Rml::Element* element ) const override;

	/// Called to release element data generated by this decorator.
	/// @param[in] element_data The element data handle to release.
	void ReleaseElementData( Rml::DecoratorDataHandle element_data ) const override;

	/// Called to render the decorator on an element.
	/// @param[in] element The element to render the decorator on.
	/// @param[in] element_data The handle to the data generated by the decorator for the element.
	void RenderElement( Rml::Element* element, Rml::DecoratorDataHandle element_data ) const override;

private:

	idStr modelName;
	idVec3 modelRotate;
	idVec3 modelOrigin;
};

#include <RmlUi/Core/DecoratorInstancer.h>

class idRmlRenderDecoratorInstancer : public Rml::DecoratorInstancer
{
public:
	idRmlRenderDecoratorInstancer();
	~idRmlRenderDecoratorInstancer();

	void Init();

	/// Instances a decorator given the property tag and attributes from the RCSS file.
	Rml::SharedPtr<Rml::Decorator> InstanceDecorator( const Rml::String& name, const Rml::PropertyDictionary& properties, const Rml::DecoratorInstancerInterface& instancer_interface ) override;

private:

	Rml::PropertyId modelName;
	Rml::PropertyId modelRotate;
	Rml::PropertyId modelOrigin;
};

#endif
